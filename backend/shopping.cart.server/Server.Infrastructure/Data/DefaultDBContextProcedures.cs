// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Server.Model.Models;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Server.Infrastructure.Data
{
    public partial class DefaultDBContext
    {
        private DefaultDBContextProcedures _procedures;

        public virtual DefaultDBContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new DefaultDBContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public DefaultDBContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class DefaultDBContextProcedures
    {
        private readonly DefaultDBContext _context;

        public DefaultDBContextProcedures(DefaultDBContext context)
        {
            _context = context;
        }

        public virtual async Task<List<Get_User_InformationResult>> Get_User_InformationAsync(string UserNmae, string Password, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserNmae",
                    Size = 50,
                    Value = UserNmae ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Password",
                    Size = 50,
                    Value = Password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Get_User_InformationResult>("EXEC @returnValue = [dbo].[Get_User_Information] @UserNmae, @Password", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
